//создание таблицы:

CREATE TABLE `users` ( 
    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT , 
    `name` VARCHAR(32) NOT NULL , 
    `gender` ENUM('male','female') NOT NULL DEFAULT 'male' , 
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , 
    `child` BOOLEAN NULL , 
    PRIMARY KEY (`id`)
    ) 
    ENGINE = InnoDB;

//удаление таблицы:

DROP TABLE users

//Добавление строк в таблицу

    method 1:
        INSERT INTO users VALUES(1, 'Bob','male', '2022-08-23 19:00:20', true)
    method 2:
        INSERT INTO users (name, child) VALUES('John', false) //choose columns to fill and indicate values for this columns
    multiple adding:
        INSERT INTO users (name, child) VALUES('Pete', false), ('Mark', true)

//Deleting rows

DELETE FROM users; //delete all data from table

DELETE FROM users WHERE id=1; //delete user with id=1

====
Comparison operators:
= >= <= > < !=

====
Проверка на равенство NULL: 
    имя_столбца IS NULL

Проверка на не равенство NULL: 
    имя_столбца IS NOT NULL

DELETE FROM users WHERE child IS NULL; //удалили всех пользователей без детей

=====
Логические операторы:

AND, OR

DELETE FROM users WHERE name='Bob' or name='Mark' or name='Liza'

=====
Чтобы не писаь несколько "или" можно сдалать проверку на принадлежность множеству (IN):

DELETE FROM users WHERE name IN ('Bob', 'Mark', 'Liza');

=====
Проверка на принадлежность диапазону (BETWEEN):

DELETE FROM users WHERE year>=2000 AND year<=2010;
    ИЛИ:
DELETE FROM users WHERE year BETWEEN (2000,2010);

====
Обновление строк:

UPDATE users SET name='Masha', gender='female' WHERE id=2

====
Выборка данных:

SELECT * FROM users WHERE id=3; //получить все данные по пользователю с ид=3
SELECT id, name FROM users WHERE id=3; //получить id, name по пользователю с ид=3

====
Псевдонимы столбцов (AS):
SELECT name AS 'title', pressrun AS 'quantity' FROM books WHERE id=1

====
Сортировка таблицы:

SELECT name, price FROM books ORDER BY price //по умолчанию сортирует от меньшего к большему (ASC - этот параметр по умолчанию, поэтому его можно не писать)

SELECT name, price FROM books ORDER BY price DESC //сортировка от большего к меньшему


SELECT TRIM(name), price FROM books ORDER BY TRIM(name) //TRIM - функция которая обрезает пробелы

SELECT TRIM(name) AS name, price FROM books ORDER BY TRIM(name) //в php запросе надо переименовывать столбец, чтобы возвращаемые данные не воспринимались как функция с параметром

SELECT TRIM(name), price FROM books ORDER BY 1 /можно указывать номер столбца. т.е. тут мы сортируем по первому указанному столбцу - name. это позволяет два раза не писать TRIM(name)

Двойная сортировка:

SELECT name, themes, category FROM books ORDER BY themes, category // сортируется сначала по теме, а потом по категории внутри

====
Удаление повторяющихся строк (DISTINCT):
-----------------------------------------

SELECT DISTINCT themes FROM books ORDER BY 1

SELECT DISTINCT themes, category FROM books ORDER BY 1 //если выбирается два столбца, то остаются уникальные пары

====
Поиск по неполным данным (LIKE):
---------------------------------
WHERE имя_столбца LIKE 'шаблон'

% - 0 и более любых символов;
_ - 1 любой символ;

SELECT name, price FROM books WHERE name LIKE '%html%' //находим книги в названиях которых есть "html". запрос в кавычках регистронезависимый.

SELECT name, price FROM books WHERE name LIKE '%html%' AND price<20 //с доп. условиями

SELECT name, price FROM books WHERE name LIKE '%html%' AND price<20 ORDER BY price //+сортировка по цене 

SELECT name, price FROM books WHERE name NOT LIKE '%html%' // выбираем книги в которых нет слова 'html'

====
Поиск по неполным данным с регулярным выражением (RLIKE):
---------------------------------

SELECT name, price FROM books WHERE name RLIKE '[0-9]{4}' //4 цифры от 0 до 9

SELECT name, price FROM books WHERE name NOT RLIKE '[0-9]{4}' //не 4 цифры от 0 до 9


====
Агрегирующие функции
---------------------
MIN, MAX, COUNT, SUM, AVG
В парметре принимают название столбца и возвращают одно! значение.

MIN, MAX для строковых значений - отсортирует по алфавиту и выберет первую или последнюю строку соответственно

SELECT min(price) FROM books

SELECT min(price) FROM books WHERE new=1 // минимальная стоимость с доп. параметром поиска (книги новинки)

COUNT (*) - возвращает количество всех строк таблицы
COUNT (название столбца) - подсчитает кол-во строк содержащих не NULL значение

SELECT COUNT(*) AS total, COUNT(dateizd) as izd, AVG(price) as avg FROM books

====
Группа строк (GROUP BY)
------------------------

SELECT category FROM books GROUP BY category ORDER BY category

Агрегирующая функция будет вызываться для каждой группы строк
    Например, функция MIN будет возвращать не одно какое-то значение а будет возвращать значение для каждой группы строк

SELECT izd, COUNT(*) FROM books GROUP BY izd - количиество книг у каждого издательства
    если не написать в конце GROUP BY, то функция COUNT вернет одно значение, а издательств у нас много, поэтому надо их группировать.

===
Условие для группы строк
------------------------

WHERE - работает посрочно, имеет доступ только к одной строке. Его нельзя использовать с агрегирующими функциям (например, COUNT)
Для решения вопроса использует HAVINGЮ например:
SELECT izd, COUNT(dateizd) FROM books GROUP BY izd HAVING COUNT(dateizd)>20

Вместе с HAVING не обязательно использовать Агрегирующие функции, можно просто писать название столбца и Условие

Разбивка на строки:
SELECT izd, COUNT(dateizd) 
FROM books 
GROUP BY izd 
HAVING COUNT(dateizd)>20
ORDER BY 2

izd
---
id name 
1   Dia
2   BHV

themes
----
id  name

categoty
----
id  name

books
---
id  code  new   name   izd_id   theme_id   categoty_id


Многотабличные запросы
---------------------
SELECT products.name, categories.name 
FROM products JOIN categories ON products.category_id = categories.id

//таблица library
SELECT books.name, themes.NAME, categories.Name, press.Name
FROM (books JOIN themes ON books.Id_Themes=themes.ID) 
    JOIN categories ON books.id_category = categories.id
    JOIN press ON books.Id_Press = press.id

что в запросе выше сделали: (books+themes) + categoties
нужно сначала объединять таблицы, которые имеют общие столбцы

Сколько студентов в каждой группе

SELECT CONCAT(students.FirstName, ' ', students.LastName), `groups`.name
FROM students JOIN `groups` ON students.Id_Group=`groups`.id;

SELECT COUNT(*), `groups`.name 
FROM students JOIN `groups` ON students.Id_Group=`groups`.id 
GROUP BY groups.id


====
Сколько студентов на каждом факультете:
---------------------------------------

студент -> группа -> факультет

SELECT COUNT(*), faculties.name 
FROM students JOIN `groups` ON students.Id_Group=`groups`.id
JOIN faculties ON `groups`.Id_faculty=faculties.id
GROUP BY faculties.id
ORDER BY faculties.name

====
Студент и сколько он брал книг
------------------------------

SELECT COUNT(*), students.FirstName
FROM s_cards JOIN students ON s_cards.Id_Student = students.ID
GROUP BY students.ID


SELECT COUNT(*), students.FirstName
FROM s_cards RIGHT OUTER JOIN students ON s_cards.Id_Student = students.ID
GROUP BY students.ID

показываем всех студентов, даже тех кто не брал книги:

SELECT COUNT(s_cards.Id_Book), students.FirstName
FROM s_cards RIGHT OUTER JOIN students ON s_cards.Id_Student = students.ID
GROUP BY students.ID